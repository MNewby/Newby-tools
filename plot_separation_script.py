import math as ma
import numpy as np
import scipy as sc
import files as fi
import matplotlib
#matplotlib.use('PS')
import matplotlib.pyplot as plt
import astro_coordinates as coor

'''python script for quickly analyzing data.
Matthew Newby, February 22, 2012'''

#plot wedge outline;  positions of fits will be points, with size <-> sigma;
# r0 can be dotted band on wedge?

# show dot product for theta, phi?
# pi chart for epsilons?
# q?

# plot area will be a rectangle, everything will be rotated to 0-180 degrees

deg = 180.0 / ma.pi 
rad = ma.pi / 180.0

mu_min, mu_max, mu_step = 310.0, 419.0, 10
nu_min, nu_max, nu_step = -1.25, 1.25, 0.01
g_min, g_max, g_step = 16.0, 22.5, 0.1
r_min, r_max, r_step = coor.getr(g_min), coor.getr(g_max), 1.0

# params:  (0) q, (1) r0, (2) eps1, (3) mu1, (4) r1, (5) theta1, (6) phi1, (7) sigma1, (8+) etc2
base_params = [0.455, 19.5, -2.0, 360.0, 21.0, 0.0, 0.0, 1.0, -20.0, 0.0, 0.0, 0.0, 0.0, 0.1]

""" set 1 
fits = [
    [0.475327420183122, 15.713584742146832, 
     -1.9775646182435411, 0.03651142048400802, 20.911171039807066, 0.0, 6.283185307179586, 1.0,
     -20.0, 75.99999999853678, 45.7, 6.283185307179586, 2.235076930198925, 1.0],
    [0.4893922624025933, 17.704928980687075,
     -2.0404335113612424, 0.04556372224625185, 21.09655088818001, 0.0, 0.0023900782833266108, 1.0,
     -19.9999244362222, 76.0, 36.81282179243893, 5.850074298007271, 0.2920932656983071, 19.99621820184909],
    [0.5365879809070045, 8.835827427800472,
     -1.2866515732682133, 22.0282867183652, 20.26159364245282, 1.9361892304689605, 5.156542533627633, 1.0000110295383529,
     -8.599516830387287, 1.8479918605604446, 3.1926322241404312, 1.3072306295288028, 6.158867283053862, 17.870352496110993],
    [0.50479579847969, 22.611807991315167,
     -2.1520658211338572, 0.06399081992021123, 21.50593376613747, 3.101359226193564, 1.8689255658839763, 1.0017077201665576,
     -19.97951750088289, 75.76762855214534, 0.7, 0.0011212184628363257, 0.002905144242934826, 2.1193692431643623],
    [0.34164366580478167, 26.49145355419655,
     -0.7816364127197786, 2.8166202034135006, 22.210416044579077, 5.565711660508858, 4.916832636483337, 1.0,
     -2.417923354841069, -53.0, 4.629903178452867, 2.6442591277735037, 4.458907028394415, 16.590898016952277] ]"""

"""  set 2 """
fits = [
    [0.4842627992604452, 15.27384670222496,
     -1.885605789794906, 0.09635940118989095, 20.81470904378699, 1.5953536128500042E-5, 0.02578173117436961, 1.0179750191521824,
     -20.0, 75.99999445122289, 1.892181453597606, 4.273944960950132, 3.221155093596721, 1.00000134191915],
    [0.49310496179028934, 17.678923642567103,
     -2.053091436026615, -0.028218416408771218, 21.137856189306486, 3.1189887623364343, 3.655781905442996, 1.0,
     -10.20798749210734, 72.49194903842486, 10.26543467006831, 3.667492786832759, 6.275595497381867, 19.99974790853668],
    [0.4998114489864654, 20.54677012065313,
     -2.2991011301494813, -0.2920447277556133, 21.440050373696387, 6.282179238964169, 3.2265440943343435, 1.0,
     -20.0, -47.53738755778537, 18.093772443981372, 1.218875531062474, 1.4788968198532735, 12.515962378237436],
    [0.5214417253200996, 23.211750949532046,
     -2.191512663490386, 0.1330712076017182, 21.759770034483125, 6.269170412139704, 6.258766930831099, 1.023460565837258,
     -19.036866492473358, 68.42321456283037, 0.8581499097184789, 0.012490572718917141, 2.033056451753353, 19.28960415368505],
    [0.5355785897295372, 27.114394950430757,
     -1.5552950354031319, 1.8851447359540396, 22.10266323077621, 6.283185307179586, 6.283185307179586, 1.0,
     -20.0, 68.50721549458682, 0.7, 0.0, 0.0, 1.0] ]
""" set 3 prelim
fits = [
    [0.4668120712007835, 16.111056376135902,
     -1.9128059900886325, 0.24304317617510995, 21.193651981872584, 3.155750569267429, 5.394986054680701, 1.0002507065879285,
     -9.031900412113359, 49.58778882207185, 28.115401142701256, 1.8860992459921728, 2.8275667778975797, 6.2669976467653505],
    [0.5010314676871759, 16.24392752274844,
     -2.8970216015838623, -0.9205323491634809, 20.557891297212116, 6.280624409042674, 6.263005974400131, 1.018277483673943,
     -19.986145072013883, 75.49754592041741, 1.0435293288927543, 3.0197838288445937, 4.880160479533648, 15.240857519180025],
    [0.5090912882660812, 20.3765233164667,
     -3.6913371168995144, 1.9337564205922977, 22.899776120582963, 3.3511250792522094, 4.006501589828402, 1.0024577728942183,
     -5.649731776429637, 24.013549439384178, 4.213286789192282, 4.670072663838367, 2.316917086055437, 1.711602468135102],
    [0.5388769566819344, 21.599046855427886,
     0.37531525768827345, 1.2332918649614395, 24.614067181623508, 0.0010150132491867044, 3.193515733559238, 1.002010379161941,
     -19.997149699206776, -2.0836393247156924, 0.703956832322478, 6.2806849271174645, 5.883690309996662, 1.0045266893120488],
    [0.42673603681728356, 28.93265167961434,
     -1.762569188484162, 3.944372705435991, 18.722145754805247, 2.7501032951788034, 6.070648965839126, 1.0218118803839766,
     -4.178354709135251, 52.23016043941555, 26.88477141429543, 0.33568170177121215, 4.159300000174185, 16.304011268787228]  ]"""

def get_xy(mu, r, rot):
    base_mu = mu + rot
    while base_mu > 180.0:
        base_mu = base_mu - 180.0
    while base_mu < 0.0:
        base_mu = base_mu + 180.0
    x = r*sc.cos(base_mu*rad)
    y = r*sc.sin(base_mu*rad)
    return x,y


# wedgeplot
sweep = (mu_max - mu_min) / 2.0
mu_rot = (90.0 - sweep - mu_min)
angles = sc.arange(90.0-sweep, 90.0+sweep, 0.1)
x1 = r_max*sc.cos(angles*rad)
x2 = r_min*sc.cos(angles*rad)
x3 = sc.append(x1,x2[::-1])
x = sc.append(x3, x1[0])
y1 = r_max*sc.sin(angles*rad)
y2 = r_min*sc.sin(angles*rad)
y3 = sc.append(y1,y2[::-1])
y = sc.append(y3, y1[0])

colors = ["b", "r", "g", "m", "c"]
color=0

plt.figure(1)
sp = plt.subplot(111)
#Plot background
plt.plot(x, y, "k-")
plt.xlim()
plt.ylim()
plt.setp(sp.get_xticklabels(), visible=False)
plt.setp(sp.get_yticklabels(), visible=False)
#plt.text(x1[0], y1[0], str(mu_min), rotation=sweep, fontsize=10)
#plt.text(x1[-1], y1[-1], str(mu_max), rotation=sweep, fontsize=10)
dividers = sc.arange(mu_min, mu_max, 20.0) + mu_rot
r = sc.arange(r_min, r_max+2.0, 0.5)
for ray in dividers:
    plt.plot(r*sc.cos(ray*rad), r*sc.sin(ray*rad), "k:")
    plt.text(r[-1]*sc.cos(ray*rad), r[-1]*sc.sin(ray*rad), str(ray-mu_rot), fontsize=10)
r = sc.arange(5.0, 45.7, 10.0)
for dist in r:
    plt.text(dist*sc.cos((mu_min+mu_rot)*rad)+1.0, dist*sc.sin((mu_min+mu_rot)*rad), str(dist), fontsize=10)
    plt.plot(dist*sc.cos(angles*rad), dist*sc.sin(angles*rad), "k:")
# plot base params
base_x, base_y = get_xy(base_params[3], base_params[4], mu_rot)
plt.scatter(base_x, base_y, s=4.0*(base_params[7]*3.0)**2, marker="o", edgecolor="k", facecolor="w")
base_x, base_y = get_xy(base_params[9], base_params[10], mu_rot)
plt.scatter(base_x, base_y, s=4.0*(base_params[13]*3.0)**2, marker="o", edgecolor="k", facecolor="w")
r0x, r0y = base_params[1]*sc.cos(angles*rad), base_params[1]*sc.sin(angles*rad)
plt.plot(r0x, r0y, "k--")
# plot fit params
for fit in fits:
    base_x, base_y = get_xy(fit[3], fit[4], mu_rot)
    plt.scatter(base_x, base_y, s=4.0*(fit[7]*3.0)**2, marker="o", edgecolor=colors[color], facecolor="w")
    base_x, base_y = get_xy(fit[9], fit[10], mu_rot)
    plt.scatter(base_x, base_y, s=4.0*(fit[13]*3.0)**2, marker="o", edgecolor=colors[color], facecolor="w")
    plt.plot(fit[1]*sc.cos(angles*rad), fit[1]*sc.sin(angles*rad), (colors[color]+"--"))
    color = color + 1
plt.show()